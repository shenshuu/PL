
#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;; put your code below

(define (sequence low high stride)
  (if (> low high)
      null
      (cons low (sequence (+ low stride) high stride))))


(define (string-append-map xs suffix)
  (map (lambda (x) (string-append x suffix)) xs))


(define (list-nth-mod xs n)
  (cond [(< n 0) (error "list-nth-mod: negative number")]
        [(null? xs) (error "list-nth-mod: empty list")]
        [#t (car (list-tail xs (remainder n (length xs))))]))


(define (stream-for-n-steps s n)
  (if (= n 0)
      null
      (cons (car (s)) (stream-for-n-steps (cdr (s)) (- n 1)))))


(define funny-number-stream
  (letrec ([f (lambda (x)
                (if (= (remainder x 5) 0)
                    (cons (- x) (lambda () (f (+ x 1))))
                    (cons x (lambda () (f (+ x 1))))))])
    (lambda () (f 1))))


(define dan-then-dog
  (letrec ([f (lambda () (cons "dan.jpg" g))]
           [g (lambda () (cons "dog.jpg" f))])
    f))


(define (stream-add-zero s)
  (letrec ([f (lambda (g) (cons
                           (cons 0 (car (g)))
                           (lambda () (f (cdr (g))))))])
    (lambda () (f s))))


(define (cycle-lists xs ys)
  (define (helper xes yes)
    (cond [(and (null? (cdr xes)) (null? (cdr yes))) (cons (cons (car xes) (car yes)) (lambda() (helper xs ys)))]
          [(null? (cdr xes)) (cons (cons (car xes) (car yes)) (lambda() (helper xs (cdr yes))))]
          [(null? (cdr yes)) (cons (cons (car xes) (car yes)) (lambda() (helper (cdr xes) ys)))]
          [#t (cons (cons (car xes) (car yes)) (lambda () (helper (cdr xes) (cdr yes))))]))
  (lambda () (helper xs ys)))


(define (vector-assoc v vec)
  (define len (vector-length vec))
  (define (helper n)
    (cond [(= n len) #f]
          [(pair? (vector-ref vec n))
           (if (equal? (car (vector-ref vec n)) v)
               (vector-ref vec n)
               (helper (+ n 1)))]
          [#t (helper (+ n 1))]))
  (helper 0))


(define (cached-assoc xs n)
  (define cache (make-vector n #f))
  (define index 0)
  (lambda (v)
    (define cached-ans (vector-assoc v cache))
    (if (pair? cached-ans)
        cached-ans
        ((lambda ()
           (define computed-ans (assoc v xs))
           (vector-set! cache index computed-ans)
           (set! index (remainder (+ index 1) n))
           computed-ans)))))